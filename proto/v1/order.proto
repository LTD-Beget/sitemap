syntax = "proto3";

package beget.sitemap.v1.order;

import "google/api/annotations.proto";

// Генерация sitemap.xml
//
// Предоставляет методы для работы с заявками на генерацию sitemap.xml
service OrderService {
    // Создать заявку
    //
    // Создаёт заявку на генерацию sitemap.xml. Если завяка уже есть, то обновляет существующую.
    //
    // Для получения доступных доменов `fqdn` необходимо использовать метод
    // "Получить список доступных доменов" из API "Генерация sitemap.xml".
    rpc createOrder(CreateOrderRequest) returns (CreateOrderResponse) {
        option (google.api.http) = {
            post: "/v1/sitemap/order"
            body: "*"
        };
    }

    // Получить заявку
    //
    // Возвращает информацию о заявке на генерацию sitemap.xml.
    // В случае отсутствия заявки вернёт 404.
    rpc getOrderByFqdn(GetOrderByFqdnRequest) returns (GetOrderByFqdnResponse) {
        option (google.api.http) = {
            get: "/v1/sitemap/order/{fqdn}"
        };
    }

    // Отменить заявку
    //
    // Отменяет существующую заявку на генерацию sitemap.xml.
    //
    // Для получения существующих заявок необходимо использовать метод
    // "Получить список заявок" из API "Генерация sitemap.xml".
    rpc cancelOrder(CancelOrderRequest) returns (CancelOrderResponse) {
        option (google.api.http) = {
            post: "/v1/sitemap/order/{fqdn}/cancel"
        };
    }

    // Получить список заявок
    //
    // Возвращает список всех заявок на генерацию sitemap.xml, которые были созданы пользователем.
    rpc getOrderList(GetOrderListRequest) returns (GetOrderListResponse) {
        option (google.api.http) = {
            get: "/v1/sitemap/order-list"
        };
    }

    // Получить список доступных доменов
    //
    // Возвращает список доменов, для которых можно сгенерировать sitemap.xml
    rpc getValidFqdnList(GetValidFqdnListRequest) returns (GetValidFqdnListResponse) {
        option (google.api.http) = {
            get: "/v1/sitemap/valid-fqdn-list"
        };
    }
}

message CreateOrderRequest {
    // Домен, для которого нужно создать заявку
    string fqdn = 1;

    // Параметры генерации Sitemap
    GenerationParams params = 2;
}

message CreateOrderResponse {
    oneof result{
        // Информация о заявке
        Order order = 1;

        // Ошибка создания заявки
        Error error = 2;
    }

    message Error {
        // Код ошибки
        Code code = 1;

        // Расширенное описание ошибки
        oneof extra {
            //Расширенное описание ошибки: некорректное значение переменной
            GenerationParamsError params_error = 2;
        }

        message GenerationParamsError {
            // Список ошибок
            repeated ValueError error = 2;

            enum ValueError {
                _ = 0;

                // Некорректная глубина обхода ссылок на сайте
                INVALID_SCAN_DEPTH = 1;

                // Некорректная задержка между запросами при обходе ссылок на сайте
                INVALID_REQUEST_DELAY = 2;
            }
        }

        enum Code {
            _ = 0;

            // Поле домена не заполнено
            EMPTY_FQDN = 1;

            // Домен принадлежит другому пользователю
            ANOTHER_CUSTOMER = 2;

            // Некорректный домен
            INVALID_FQDN = 3;

            // Уже существует заявка на генерацию в работе
            ALREADY_PROCESSING = 4;

            // У домена установлены не BEGET NS записи
            NOT_OUR_NS_RECORDS = 5;

            // A записи домена ведут не на сервера BEGET
            NOT_OUR_A_RECORDS = 6;

            // Некорректные параметры генерации
            INVALID_PARAMS = 7;

            // К сайту прилинковано более одного домена
            TOO_MANY_LINKED_DOMAINS = 8;
        }
    }
}

message GetOrderByFqdnRequest {
    // Домен, для которого нужно получить заявку
    string fqdn = 1;
}

message GetOrderByFqdnResponse {
    // Информация о заявке
    Order order = 1;
}

message CancelOrderRequest {
    // Домен, для которого нужно отменить заявку
    string fqdn = 1;
}

message CancelOrderResponse {
}

message GetOrderListRequest {
}

message GetOrderListResponse {
    // Список заявок
    repeated Order order = 1;
}

message GetValidFqdnListRequest {
}

message GetValidFqdnListResponse {
    // Список доступных доменов
    repeated string fqdn = 1;
}

// Информация о заявке
message Order {
    // Домен
    string fqdn = 1;

    // Статус заявки
    Status status = 2;

    // Дата и время завершения генерации ышеуьфзючьд (RFC3339)
    string completion_date = 3;

    // Параметры генерации sitemap.xml
    GenerationParams params = 4;


    // Path для загрузки архива с sitemap.xml
    string archive_path = 5;

    // Статус заявки
    enum Status {
        _ = 0;

        // Статус заявки: Генерация завершена
        COMPLETED = 1;

        // Статус заявки: Заявка создана, но ещё не обработана
        PENDING = 2;

        // Статус заявки: Происходит обход ссылок на сайте
        PROCESSING = 3;

        // Статус заявки: В процессе генерации произошла ошибка
        ERROR = 4;

        // Статус заявки: Заявка отменена
        CANCELED = 5;
    }
}

// Параметры генерации sitemap.xml
message GenerationParams {
    reserved 2;
    reserved "request_delay";

    // Глубина обхода ссылок на сайте
    uint32 scan_depth = 1;

    // Нужно ли сгенерировать дополнительный файл со списком ссылок
    bool generate_url_document = 3;

    // Нужно ли отправить результат генерации на почту
    bool send_email = 4;
}




