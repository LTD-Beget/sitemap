syntax = "proto3";

package beget.sitemap.v1.order;

import "google/api/annotations.proto";

service OrderService {
    rpc createOrder(CreateOrderRequest) returns (CreateOrderResponse) {
        option (google.api.http) = {
            post: "/v1/sitemap/order"
            body: "*"
        };
    }

    rpc getOrder(GetOrderRequest) returns (GetOrderResponse) {
        option (google.api.http) = {
            get: "/v1/sitemap/order/{id}"
        };
    }

    rpc cancelOrder(CancelOrderRequest) returns (CancelOrderResponse) {
        option (google.api.http) = {
            post: "/v1/sitemap/order/{id}/cancel"
        };
    }

    rpc getOrderList(GetOrderListRequest) returns (GetOrderListResponse) {
        option (google.api.http) = {
            get: "/v1/sitemap/order/list"
        };
    }

    rpc getValidFqdnList(GetValidFqdnListRequest) returns (GetValidFqdnListResponse) {
        option (google.api.http) = {
            get: "/v1/sitemap/valid-fqdn/list"
        };
    }
}

message CreateOrderRequest {
    string fqdn = 1;
    GenerationParams params = 2;
}

message CreateOrderResponse {
    oneof result{
        Order order = 1;
        Error error = 2;
    }

    enum Error {
        _ = 0;
        EMPTY_DOMAIN = 1;
        ANOTHER_CUSTOMER = 2;
        INVALID_DOMAIN = 3;
        ALREADY_PROCESSING = 4;
    }
}

message GetOrderRequest {
    // Домен, для которого нужно получить ордер
    string fqdn = 1;
}

message GetOrderResponse {
    Order order = 1;
}


message CancelOrderRequest {
    // Домен, для которого нужно отменить ордер
    string fqdn = 1;
}

message CancelOrderResponse {
}

message GetOrderListRequest {
}

message GetOrderListResponse {
    repeated Order order = 1;
}

message GetValidFqdnListRequest {
}

message GetValidFqdnListResponse {
    repeated string fqdn = 1;
}

message Order {
    string fqdn = 1;
    Status status = 2;
    string completion_date = 3;
    GenerationParams params = 4;

    enum Status {
        _ = 0;
        COMPLETED = 1;
        PENDING = 2;
        PROCESSING = 3;
        ERROR = 4;
        CANCELED = 5;
    }
}
message GenerationParams {
    // ?
    uint32 scan_depth = 1;

    uint32 timeout = 2;

    bool generate_url_document = 3;

    bool send_email = 4;
}




